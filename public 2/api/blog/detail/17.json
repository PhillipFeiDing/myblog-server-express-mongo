{
    "data": {
        "id": 17,
        "content": "<h1 id=\"python-flask-tutorial-basics-notes\">Python Flask Tutorial Basics Notes</h1>\n<h2 id=\"learning-resources\">Learning Resources</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Z1RJmh_OqeA\" target=\"_blank\">Flask Set-up and Basics</a><ul>\n<li>Watch until 16:50. we are not using SQLAlchemy because it writes queries for you, which is forbidden by the course policy. We will find an alternative study resource in the database section. To that end, don't install the <code>flask-sqlalchemy</code> package!</li>\n</ul>\n</li>\n<li><a href=\"https://ampersandacademy.com/tutorials/flask-framework/flask-framework-mysql-connection-using-pymysql\" target=\"_blank\">PyMySQL with Flask</a><ul>\n<li>This is the right thing about MySQL database connecting to Flask we are looking at! <code>pymysql</code> builds the bridge between the MySQL server and your backend server. You will be writing SQL to directly talk to MySQL!</li>\n</ul>\n</li>\n<li><a href=\"https://flask-login.readthedocs.io/en/latest/\" target=\"_blank\">Flask Login Documentation</a><br><ul><li>A very elaborated extension to Flask that handles login and session validation gracefully. We will only use the most basic functions.</li></ul></li></ul>\n<p><span style=\"font-style: italic;\">And as always, Google it if you want to learn anything!</span></p><p><strong>If there are any inconsistencies between the tutorial resources and this notebook, follow this notebook instead because this is closer to what we will do for the project!</strong></p>\n<h2 id=\"preparation\">Preparation</h2>\n<ul>\n<li>Install Python 3.6+ and PIP</li>\n<li>Install virtualenv</li>\n<li>Create our project directory</li>\n<li>Create a virtual environment</li>\n<li>Install the required packages</li>\n</ul>\n<h2 id=\"virtualenv-and-your-first-server-page\">Virtualenv and Your First Server Page</h2>\n<ol>\n<li>Install <code>virtualenv</code> instead of relying on the global packages<ul>\n<li>how: run <code>pip3 install virtualenv</code></li>\n<li>why: to share code/project with other collaborators.</li>\n<li>Note: but you still need to install the package <code>virtualenv</code> <em>globally</em> to enable you to use the virtual environment. Just the other packages will be in this virtual environment.</li>\n</ul>\n</li>\n<li>Create and Activate the virtual environment<ul>\n<li><code>virtualenv env</code> // create</li>\n<li><code>source env/bin/activate</code> // activate</li>\n<li><code>deactivate</code> // exit gracefully if you need to</li>\n</ul>\n</li>\n<li><strong>Inside the virtual environment</strong>, install <code>flask</code><ul>\n<li><code>pip3 install flask</code></li>\n</ul>\n</li>\n<li>Create a file named <code>app.py</code> inside your root directory, and paste in the following code</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route('/')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-keyword\">    return</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n</code></pre><ul>\n<li>Start the server and view the page<ul>\n<li>To start the server, run <code>python app.py</code></li>\n<li>You should see something like <code>Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</code>, the actual portal number 5000 may subject to change.</li>\n<li>Go to the browser and type in URL <code>localhost:5000</code></li>\n<li>Now you should see \"Hello World!\" printed on page</li>\n</ul>\n</li>\n</ul>\n<p><em>A website printing Hello World is boring. Let's spice it up!</em></p>\n<h2 id=\"static-contents-and-templates\">Static Contents and Templates</h2>\n<ol>\n<li>Create <code>static</code> and <code>templates</code> folder inside you working directory</li>\n<li>You also need to import the <code>render_template</code> module other than Flask from flask</li>\n<li>Now your index() function can return a template file instead of a string<ul>\n<li>create a file named <code>index.html</code> inside the <code>render_templates</code> folder.</li>\n<li><code>return render_templates('index.html')</code>, // no need to include the directory name, the module knows it.</li>\n</ul>\n</li>\n<li>The final <code>app.py</code> after change looks like this:</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route('/')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-keyword\">    return</span> render_template(<span class=\"hljs-string\">'index.html'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)</code></pre><h3 id=\"template-inheritance\">Template Inheritance</h3>\n<ul>\n<li>A way to reduce redundant template code</li>\n<li>See the example of how it is done.</li>\n<li>The <code>{% XXX %}</code> syntax</li></ul><h3 id=\"static-contents\">Static Contents</h3><ol>\n<li>Inside the <code>static</code> folder, create <code>css/main.css</code></li>\n<li>To link <code>main.css</code> to <code>index.html</code>, don't forget to import <code>url_for</code> module<ul>\n<li>the <code>{{ function() }}</code> is the template string library in flask, just like <code>${}</code> to JavaScript!</li>\n<li>Link HTML with CSS using the way defined below, don't hardcode the path because that won't work!</li></ul></li></ol>\n<p><strong><em>The aforesaid thing about templates is purely for learning purposes. In our implementation, we rarely let the backend handle page rendering logic. We strictly endorse the rule to have the frontend do so, and only the necessary data will transfer between the frontend and backend through APIs/routes.</em></strong></p>\n<p><strong><em>However, we may use them to create routes to retrieve frontend resources. Since the frontend project structure needs to change to accommodate this Flask project convention, we might be forced to use some of the template formattings, but they should not be too painful.</em></strong></p>\n<h2 id=\"the-database-flask-pymysql-mysql\">The Database: Flask &lt;-&gt; PyMySQL &lt;-&gt; MySQL</h2>\n<p><em>The PyMySQL is called a connector, because it connects your backend (Flask) and the database (MySQL).</em></p>\n<ol>\n<li>Install the database connector package<ul>\n<li>Inside the virtual environment, run <code>pip3 install pymysql</code></li>\n</ul>\n</li>\n<li>Import the module<ul>\n<li><code>import pymysql.cursors</code></li>\n</ul>\n</li>\n<li>Create a connection<ul>\n<li>NOTE: change all capitalized fields<ul>\n<li><code>user</code> is your MySQL username, most people have <code>root</code></li>\n<li><code>password</code> is something you should know as long as you can connect to MySQL through the command line.</li>\n<li><code>db</code> is the database your application backend interacts with.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>connection = pymysql.connect(host=<span class=\"hljs-string\">'localhost'</span>,\n                             user=<span class=\"hljs-string\">'USERNAME'</span>,\n                             password=<span class=\"hljs-string\">'PASSWORD'</span>,\n                             db=<span class=\"hljs-string\">'DATABASE_NAME'</span>,\n                             charset=<span class=\"hljs-string\">'utf8mb4'</span>,\n                             cursorclass=pymysql<span class=\"hljs-selector-class\">.cursors</span><span class=\"hljs-selector-class\">.DictCursor</span>)\n</code></pre><ul>\n<li>Make a simple database operation route (backend service/callable API)<ul>\n<li>Make sure you have <code>gt_food_truck</code> database set up on your machine, and MySQL server is running!</li>\n<li>This example retrieves the <code>username</code>, <code>password</code>, <code>firstName</code> and <code>lastName</code> fields from the HTTP request to complete registration for a user, and place holders are used for other fields.</li>\n<li>At this point, we will hardcode a record to insert into the <code>user</code> table.</li>\n<li>The basic syntax looks like below.</li>\n</ul>\n</li>\n</ul>\n<pre><code><span class=\"hljs-symbol\">try:</span>\n<span class=\"hljs-symbol\">    with connection.cursor() as cursor:</span>\n        sql = 'INSERT INTO `user` (`username`, `password`, `first_name`, `last_name`) ' \\\n              + 'VALUES (<span class=\"hljs-variable\">%s, %</span>s, <span class=\"hljs-variable\">%s, %</span>s)<span class=\"hljs-comment\">;'</span>\n        cursor.execute(sql, (username, password, firstName, lastName))\n        connection.commit()\n    // code logic after sql\n<span class=\"hljs-symbol\">except Exception as e:</span>\n    // code logic to handle MySQL error\n    // for debugging, just\n    print(e)\n</code></pre><ul>\n<li>To retrieve (SELECT) something. Use the following syntax:</li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">try</span>:\n    with connection.<span class=\"hljs-built_in\">cursor</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">cursor</span>:\n        sql = <span class=\"hljs-string\">'SELECT * FROM `user`;'</span>\n<span class=\"hljs-built_in\">        cursor</span>.<span class=\"hljs-keyword\">execute</span>(sql)\n        data = <span class=\"hljs-built_in\">cursor</span>.fetchall()\n    // code logic after sql\nexcept Exception <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">e</span>:\n    // code logic <span class=\"hljs-keyword\">to</span> handle MySQL error\n</code></pre><p><strong>Since we are doing an update (INSERT), we need to commit our changes to the database with <code>connection.commit()</code>. However, if we are only doing pure retrieval, we don't have to commit as you see in the last example.</strong></p>\n<h3 id=\"obtaining-get-data\">Obtaining GET data</h3>\n<ul>\n<li>Data sent by GET are encoded in the URL. They are key-value pairs appended after a route.</li>\n<li>The frontend may send a GET request in the form of URL like this<ul>\n<li><code>http://www.gtfoodtruck.com/get-user-list?username=dingfei&amp;firstName=Phillip</code></li>\n</ul>\n</li>\n<li>As you can see, the pairs start with <code>?</code> and are separated using <code>&amp;</code></li>\n<li>The backend may get them by<ul>\n<li><code>request.args.get('username')</code></li>\n<li><code>request.args.get('firstName')</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"obtaining-post-data\">Obtaining POST data</h3>\n<ul>\n<li>Data sent by POST are invisible to common users. They are considered a more secure way to transfer data because the data are included in the request body, not visible in the URL.</li>\n<li>You can't just send a POST request by hand, but JavaScript has abundant libraries to help you do so as a frontend developer.</li><li>You can also download&nbsp;<a href=\"https://www.postman.com/\" target=\"_blank\">Postman</a>&nbsp;to test POST, an excellent tool for testing backend APIs!</li>\n<li>In our example, we will strictly send JSON data between the frontend and the backend. To retrieve them using Flask:</li>\n</ul>\n<pre><code><span class=\"hljs-attr\">data</span> = request.get_json()\n<span class=\"hljs-attr\">username</span> = data[<span class=\"hljs-string\">'username'</span>]\n<span class=\"hljs-attr\">password</span> = data[<span class=\"hljs-string\">'password'</span>]\n<span class=\"hljs-attr\">firstName</span> = data[<span class=\"hljs-string\">'firstName'</span>]\n<span class=\"hljs-attr\">lastName</span> = data[<span class=\"hljs-string\">'lastName'</span>]\n</code></pre><h2 id=\"write-a-response\">Write a Response</h2>\n<ul>\n<li>Again, we will use JSON!</li>\n<li>This is the <code>return</code> statement in each Flask app route.</li>\n<li><code>from flask import jsonify</code></li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">return</span> jsonify({\n<span class=\"hljs-string\">    'key1'</span>: val1\n<span class=\"hljs-string\">    'key2'</span>: val2\n    ...\n})\n</code></pre><h2 id=\"conclusion\">Enabling Cross-Origin Resource Sharing (CORS)<br></h2><ul><li><code>pip3 install flask_cors</code></li><li><code>from flask_cors import CORS</code></li><li><code>CORS(app)</code></li></ul><h2 id=\"conclusion\">Sessions, Cookies, Logging In, and Validation</h2><ul><li>Look at the&nbsp;<a href=\"https://flask-login.readthedocs.io/en/latest/\" target=\"_blank\">Flask Login Documentation</a>&nbsp;and the demo example at the end. Pay special attention to the following.</li><li>Configuring Your Application</li><li>How It Works</li><li>Your User Class</li><li>Login Example</li><li>Protecting Views (close to the bottom)</li></ul><h2 id=\"conclusion\">Conclusion</h2>\n<p>See a full demo example bellow.</p><p><a href=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/flask-notes/flask_example.zip\" target=\"_blank\">Demo Example on GitHub</a><br></p>",
        "time": 1585000800000,
        "exerpt": "Here are the notes I took while teaching myself to use the Python Flask framework to implement the backend for the CS 4400 Project. Flask is a lightweight and easy-to-learn web framework for Python developers. We look forward to delivering high-quality work by working with this framework!",
        "tagList": [10],
        "title": "Python Flask Study Notes",
        "imageURL": "https://github.com/PhillipFeiDing/myblog-resource/blob/master/blog-cover-image/flask-logo.png?raw=true"
    },
    "errno": 0
}